options {
	IGNORE_CASE = true;
	LOOKAHEAD   = 2;			// para eliminar conflitos
}

// Descrição da classe Calc

PARSER_BEGIN(Parser)
import java.util.Vector;

public class Parser {
  static TabSim Nomes  = new TabSim(); // nomes globais
	static TabSim Locais = null;		 // nomes locais (ativada dentro de função)
  Programa[] programas = new Programa[1];
	Mapa mapa = new Mapa("/nfs/home/bcc/ruan/Documents/labprog2/ep2-labprog2/bin/../data/map/mapa3.txt");   
  Arena arena = new Arena(mapa);
	Programa programa;
	
	static int 
 = 0;						 // tamanho do programa

	public static void main(String args[]) throws ParseException 
  {
		Parser parser = new Parser(System.in); // cria o compilador
		Prog = parser.Compila();		   // compila e retorna o código de máquina
		//FALTA FAZER roda e mostra o resultado
	}
}

PARSER_END(Parser)

// Pula espaço em branco e comentários
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN :
{
 < NUM: ( ["0"-"9"] )+ >
|
 < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9","@"] )* >
|
  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">

}

// Programa é o ponto de partida
Programa Compila() :
{
	Vector<Comando> p = new Vector<Comando>(0); // para retornar
	Vector<Comando> x = new Vector<Comando>(0); // trecho compilado
													// por outras regras

	//Comando[] a = new Comando[0]; // auxiliar
}
{
	 (
	  x = Instrucao() {p.addAll(x); tam = p.size();}
	 )*
	<EOF> {
		p.add(new Comando("RET", null));		// para garantir que tem um RET
		return  p.toArray(a);
	}
}

Vector<Comando> Instrucao() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
}
{
	(
	 x = Expressão() ";" {p.addAll(x);}
	 |
	 x = Condicional()   {p.addAll(x);}
	 |
	 x = Laço()		     {p.addAll(x);}
	 |
	 x = Função()		 {
		 p.add(new Comando("JMP", new Numero(x.size() + tam))); // pula a descrição da função. Checar o lugar do pulo
		 p.addAll(x);
	 }
	 | 
	 "return" (x=Expressão() {p.addAll(x);})? ";" {p.add(new Comando("RET", null);}
	 |
	 "print" x=ListPrint() {p.addAll(x);} ";"
	 |
	 "println" ";"{
		 p.add(new Comando("PUSH", new Frase("\n")));
		 p.add(new Comando("PRN", null));
	 }
	 ) {return p;}
}

Vector<Comando> Expressão() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Arit() { p.addAll(x); }
	(
	 "<=" x = Arit() {p.addAll(x); p.add(new Comando("LE", null));}
	 |
	 ">=" x = Arit() {p.addAll(x); p.add(new Comando("GE", null));}
	 |
	 "!=" x = Arit() {p.addAll(x); p.add(new Comando("NE", null));}
	 |
	 "==" x = Arit() {p.addAll(x); p.add(new Comando("EQ", null));}
	 |
	 "<"  x = Arit() {p.addAll(x); p.add(new Comando("LT", null));}
	 |
	 ">"  x = Arit() {p.addAll(x); p.add(new Comando("GT", null));}
	 )* {return p;}
}

Vector<Comando> Arit() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Termo() { p.addAll(x); }
	(
	 "+" x = Termo() {p.addAll(x); p.add(new Comando("ADD", null));}
	 |
	 "-" x = Termo() {p.addAll(x); p.add(new Comando("SUB", null));}
	 )* {return p;}
}

Vector<Comando> Termo() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Fator() { p.addAll(x); }
	(
	 "*" x = Fator() {p.addAll(x); p.add(new Comando("MUL", null));}
	 |
	 "/" x = Fator() {p.addAll(x); p.add(new Comando("DIV", null));}
	 )* {return p;}
}

Vector<Comando> Fator() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
	Endereco v;
}
{
	x=Chamada()// Chamada de função 
  {				
		p.addAll(x); 
		return p;
	}
|								// Atribuição
	 t=<ID> "=" x=Expressão() 
   {	
		p.addAll(x);
		p.add(new Comando("DUP", null));		// deixa uma cópia na pilha

		// Verifica se estamos dentro de uma função
		if ((Locais != null) && Locais.exists(t.image)) 
    {
			v = Locais.get(t.image);
    //  p.add(new Comando("PUSH", new Numero(0))); Var recebe expressão, já empilhado
      p.add(new Comando("STO", new Numero(v.get()))); // V é endereço. Atenção
			
    }
		else if (Nomes.exists(t.image)) 
    { // existe como global? sera?
			v = Nomes.get(t.image);
			if (v instanceof Endereco)
      {
        // p.add(new Comando("PUSH", new Numero(0))); 
         p.add(new Comando("STO", new Numero(v.get()))); // V é endereço. Atenção
      }
			else 
      {
        p.add(new Comando("PUSH", new Frase("DEU MERDA!"));
        p.add(new Comando("PRN", null); // colocar erro de compilação aqui
      }
		}
		else 
    {					// cria local ou global, de acordo
			v = new Variável();//???????????????????????????????????????????????????????????????????????????????
			if (Locais != null) 
      { // dentro de função -> local
				Locais.add(t.image,v);
       // p.add(new Comando("PUSH", new Numero(0))); 
        p.add(new Comando("STO", new Numero(v.get()))); // V é endereço. Atenção
			}
			else 
      {				// global
				Nomes.add(t.image,v);
       // p.add(new Comando("PUSH", new Numero(0))); 
        p.add(new Comando("STO", new Numero(v.get()))); // V é endereço. Atenção
			}
		}
	 return p;
	}
	|
	t=<ID> {					// variável, tratamento similar ao de cima
		if ((Locais != null) && Locais.exists(t.image)) 
    {
  		v = Locais.get(t.image);	
  		p.add(new Comando("RCL", new Numero(v.get())); // V é endereço. Lembre-se.
   	}
		else if (Nomes.exists(t.image)) 
    {
			v = Nomes.get(t.image);
			if (v instanceof Endereco) p.add(new Comando("RCL", new Numero(v.get())); // V é endereço. Sacou né?
			else
      {
        p.add(new Comando("PUSH", new Frase("DEU MERDA!")); 
        p.add(new Comando("PRN", null); // colocar erro de compilação aqui
      }
		}
 		else 
    {
 			// Variável não inicializada
 			v = new Variável();
			p.add(new Comando("PUSH", new Numero(0)));
			p.add(new Comando("DUP", null));
			if (Locais != null) 
      {
				Locais.add(t.image,v);
			  p.add(new Comando("STO", new Numero(v.get()));// V é....adivinha?
				//p.add(new Comando("SET", null);
			}
			else 
      {
				Nomes.add(t.image,v);
        p.add(new Comando("STO", new Numero(v.get()));
				//p.add(new Comando("SET", null);
			}
 		}
		return p;
	}
|
	t=<NUM> {
		p.add(new Comando("PUSH", new Numero(Double.parseDouble(t.image))); 
		return p;
	}
|
    "(" x = Expressão() ")"	{
		p.addAll(x); 
		return p;
	}
}

Vector<Instrução> Condicional() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	int delta, pos;
}
{
	("if" | "se") 
    "(" 
		x=Expressão() {p.addAll(x);} 
	")" 
	("then" | "então")
	x = Bloco() {
		delta = x.size(); 
		pos = p.size(); // para arrumar no else, se preciso
		p.add(new Comando("JIF",(tam + delta + pos + 2))); 
		p.addAll(x); 
		//		return p;
	}
	( 
	 ("else" | "senão" )
	 x = Bloco() {
		 //p.set(pos, new ZERO(delta+2));
		 delta += x.size();
		 p.add(new GOTO(tam + pos + delta+2 )); // Contas estão na lousa da Linux-BCC
		 p.addAll(x);
	 } 
	  )?
		{ return p; }
}
