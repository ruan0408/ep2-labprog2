options {
	IGNORE_CASE = true;
	LOOKAHEAD   = 2;			// para eliminar conflitos
}

// Descrição da classe Calc
PARSER_BEGIN(Calc)
import java.util.Vector;

public class Calc {
	static Instrução[] Prog;			 // programa
	static TabSim Nomes  = new TabSim(); // nomes globais
	static TabSim Locais = null;		 // nomes locais (ativada dentro de função)
	static Computador C  = new Computador(); // Máquina virtual
	static int tam = 0;						 // tamanho do programa

	public static void main(String args[]) throws ParseException {
		Calc parser = new Calc(System.in); // cria o compilador
		Prog = parser.Programa();		   // compila e retorna o código de máquina
		C.Dump(Prog);					   // imprime o código objeto
		System.out.println(((Real)C.Roda(Prog)).val()); // roda e mostra o resultado
	}
}

PARSER_END(Calc)

// Pula espaço em branco e comentários
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

// Programa é o ponto de partida
Instrução[] Programa() :
{
	Vector<Instrução> p = new Vector<Instrução>(0); // para retornar
	Vector<Instrução> x = new Vector<Instrução>(0); // trecho compilado
													// por outras regras

	Instrução[] a = new Instrução[0]; // auxiliar
}
{
	(
	 x = Comando() {p.addAll(x); tam = p.size();}
	 )*
	<EOF> {
		p.add(new RET());		// para garantir que tem um RET
		return  p.toArray(a);
	}
}

Vector<Instrução> Comando() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
}
{
	(
	 x = Expressão() ";" {p.addAll(x);}
	 |
	 x = Condicional()   {p.addAll(x);}
	 |
	 x = Laço()		     {p.addAll(x);}
	 |
	 x = Função()		 {
		 p.add(new GOTO(x.size()+1)); // pula a descrição da função
		 p.addAll(x);
	 }
	 | 
	 "return" (x=Expressão() {p.addAll(x);})? ";" {p.add(new RET());}
	 |
	 "print" x=ListPrint() {p.addAll(x);} ";"
	 |
	 "println" ";"{
		 p.add(new PUSH(new Cadeia("\n")));
		 p.add(new PRINT());
	 }
	 ) {return p;}
}

// No nível mais baixo calcula as expressões lógicas
Vector<Instrução> Expressão() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	x = Arit() { p.addAll(x); }
	(
	 "<=" x = Arit() {p.addAll(x); p.add(new MENORIGUAL());}
	 |
	 ">=" x = Arit() {p.addAll(x); p.add(new MAIORIGUAL());}
	 |
	 "!=" x = Arit() {p.addAll(x); p.add(new DIFERENTE());}
	 |
	 "==" x = Arit() {p.addAll(x); p.add(new IGUAL());}
	 |
	 "<"  x = Arit() {p.addAll(x); p.add(new MENOR());}
	 |
	 ">"  x = Arit() {p.addAll(x); p.add(new MAIOR());}
	 )* {return p;}
}

// Artiméticas
Vector<Instrução> Arit() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	x = Termo() { p.addAll(x); }
	(
	 "+" x = Termo() {p.addAll(x); p.add(new SOMA());}
	 |
	 "-" x = Termo() {p.addAll(x); p.add(new SUB());}
	 )* {return p;}
}

Vector<Instrução> Termo() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	x = Fator() { p.addAll(x); }
	(
	 "*" x = Fator() {p.addAll(x); p.add(new MULT());}
	 |
	 "/" x = Fator() {p.addAll(x); p.add(new DIV());}
	 )* {return p;}
}

Vector<Instrução> Fator() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
	Símbolo v;
}
{
	x=Chamada() {				// Chamada de função
		p.addAll(x); 
		return p;
	}
|								// Atribuição
	 t=<ID> "=" x=Expressão() {	
		p.addAll(x);
		p.add(new DUP());		// deixa uma cópia na pilha

		// Verifica se estamos dentro de uma função
		if ((Locais != null) && Locais.exists(t.image)) {
			v = Locais.get(t.image);
			p.add(new SETLV(v.pos));
     	}
		else if (Nomes.exists(t.image)) { // existe como global?
			v = Nomes.get(t.image);
			if (v instanceof Variável)
				p.add(new SETV(v.pos));
			else p.add(new PRINT()); // colocar erro de compilação aqui
		}
		else {					// cria local ou global, de acordo
			v = new Variável();
			if (Locais != null) { // dentro de função -> local
				Locais.add(t.image,v);
				p.add(new SETLV(v.pos));
			}
			else {				// global
				Nomes.add(t.image,v);
				p.add(new SETV(v.pos));
			}
		}
		return p;
	}
	|
	t=<ID> {					// variável, tratamento similar ao de cima
		if ((Locais != null) && Locais.exists(t.image)) {
			v = Locais.get(t.image);	
			p.add(new PUSHLV(v.pos));
     	}
		else if (Nomes.exists(t.image)) {
			v = Nomes.get(t.image);
			if (v instanceof Variável)
				p.add(new PUSHV(v.pos));
			else p.add(new PRINT()); // colocar erro de compilação aqui
		}
 		else {
 			// Variável não inicializada
 			v = new Variável();
			p.add(new PUSH(new Real(0)));
			p.add(new DUP());
			if (Locais != null) {
				Locais.add(t.image,v);
				p.add(new SETLV(v.pos));
			}
			else {
				Nomes.add(t.image,v);
				p.add(new SETV(v.pos));
			}
 		}
		return p;
	}
|
	t=<NUM> {
		p.add(new PUSH(new Real(Double.parseDouble(t.image)))); 
		return p;
	}
|
    "(" x = Expressão() ")"	{
		p.addAll(x); 
		return p;
	}
}

Vector<Instrução> Condicional() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	int delta, pos;
}
{
	("if" | "se") 
    "(" 
		x=Expressão() {p.addAll(x);} 
	")" 
	("then" | "então")
	x = Bloco() {
		delta = x.size(); 
		pos = p.size(); // para arrumar no else, se preciso
		p.add(new ZERO(delta+1)); 
		p.addAll(x); 
		//		return p;
	}
	( 
	 ("else" | "senão" )
	 x = Bloco() {
		 p.set(pos, new ZERO(delta+2)); // pula o GOTO
		 delta = x.size();
		 p.add(new GOTO(delta+1));
		 p.addAll(x);
	 } 
	  )?
		{ return p; }
}

Vector<Instrução> Laço() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	int exp, delta;
}
{
	( "while" | "enquanto" )
	"("x = Expressão() {
		exp = x.size(); 
		p.addAll(x);
	}
	")" 
    ( "do" | "faça" ) 
	  x = Bloco() {
		delta = x.size()+1; 
		p.add(new ZERO(delta+1));
		p.addAll(x);
		p.add(new GOTO(-(delta+exp)));
		return p;
	}
}

Vector<Instrução> Bloco() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	"{" ( x=Comando() { p.addAll(x); } )* "}" {return p;}
	  
}

// Definição de função
Vector<Instrução> Função() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
	Função v;
	String nome;
	TabSim Lorig;
}
{
	"func" t=<ID> {				// t.image contém o nome
		if (Nomes.exists(nome = t.image)) { // já foi definida?
			v = (Função)Nomes.get(nome);
			// Isto NÃO é um tratamento de erro decente!!!!!
			// Melhore
			p.add(new PUSH(new Cadeia("Nome já usado:" + nome)));
			p.add(new PRINT());
		}
		else {					// cria a função
			v = new Função(tam+1);
			Nomes.add(nome,v);
		}
		Lorig = Locais;			// guarda a tabela de símbolos locais
								// (isso permite definições encaixadas,
								// apesar do escopo de função ser
								// global)
		Locais = v.Vars;
	}
	"(" (Args(nome,v))? ")"		// lista de argumentos
	x=Bloco() 					// corpo
	{
		p.addAll(x); 
		p.add(new RET()); 		// garante RET
		Locais = Lorig;			// restaura tabela de símbolos
		return p;
	}
}

// Argumentos
void Args(String fnom, Função v) :
{
}
{
	Arg(fnom,v)	( ","	 Arg(fnom,v) )*
}

// Um argumento
void Arg(String fnom, Função f) :
{
	Token t;
}
{
	t=<ID> {
		if (!f.exists(t.image)){
			f.addarg(t.image);
		}
	}
}

// Chamada de função
Vector<Instrução> Chamada() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
	Função f;
	Endereço e;
	String nome;
	TabSim Lorig;
}
{
    t=<ID> {					// nome da função
  		if (Nomes.exists(nome = t.image)) {
			f =  (Função) Nomes.get(t.image); // Aqui gera erro se não for função
			e = f.pos;
		}
		else { 
			e  = new Endereço(-1); //MUITO ARRISCADO!!!! Colete os
								   //pontos na tabela de símbolos e
								   //corrija os pontos depois
			f = new Função(0);
			System.out.println("Erro no uso de "+nome);
		}
		Lorig = Locais;			// disponibiliza o nome dos argumentos
		Locais = f.Vars;
	}
	"("
		x=ListParms(f) {p.addAll(x);} // lista de parâmetros
	")" 
    {
		p.add(new CALL(e)); 	// chama
		Locais = Lorig;			// restaura
		return p;
	}
}

// Parâmetros
Vector<Instrução> ListParms(Função f) :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
	int n = 0;
	String pnom;
	Variável v;
}
{
	x = Parm(f,n++) {p.addAll(x); } // compila cada argumento
	
	(
	 ","
	 x = Parm(f,n++) {p.addAll(x);}
	)*
	{ 
		p.add(new ENTRA());		// novo contexto
		// populando
		for (int i = n-1; i >=0 ; i--) {
			pnom = f.getarg(i);
			
			if (!Locais.exists(pnom)){
				// adiciona na tabela quando usada
				v = new Variável();
				Locais.add(pnom,v);
			}
			v = (Variável) Locais.get(pnom);
			
			p.add(new SETLV(v.pos));
		}
		return p;
	}
}

// Um argumento
Vector<Instrução> Parm(Função f, int n) :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	x = Expressão() {
		p.addAll(x);
		return p;
	}
	
}

// Lista para impressão
Vector<Instrução> ListPrint() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
}
{
	x=ItemPrint() {
		p.addAll(x);
	}
	
	(
	 ","
	 x=ItemPrint() {
		 p.addAll(x);
	 }
	)*
	{ return p;}
}

// Um ítem a ser impresso
Vector<Instrução> ItemPrint() :
{
	Vector<Instrução> p = new Vector<Instrução>(0);
	Vector<Instrução> x = new Vector<Instrução>(0);
	Token t;
}
{
	(
	 x=Expressão() {
		 p.addAll(x);
		 p.add(new PRINT());
	 }
	 |
	 t=<STRING_LITERAL> {
		 String s =  t.image;
		 while (s.contains("\\n"))
			 s = s.replace("\\n","\n");
		 while (s.contains("\\t"))
			 s = s.replace("\\t", "\t");
		 while (s.contains("\\b"))
			 s = s.replace("\\b", "\b");
		 while (s.contains("\\r"))
			 s = s.replace("\\r", "\r");
		 while (s.contains("\\f"))
			 s = s.replace("\\f", "\f");
		 while (s.contains("\\\\"))
			 s = s.replace("\\\\", "\\");

		 p.add(new PUSH(new Cadeia(s.substring(1,s.length()-1))));
		 p.add(new PRINT());
	 }
	)
	{ return p;}
}

// Definição dos tokens
TOKEN :
{
 < NUM: ( ["0"-"9"] )+ >
|
 < ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9","@"] )* >
|
  <STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">

}


