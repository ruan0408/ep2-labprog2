options {
	IGNORE_CASE = false;
	LOOKAHEAD   = 2;			// para eliminar conflitos
	STATIC = false;
}

// Descrição da classe Calc

PARSER_BEGIN(Parser)
import java.util.Vector;
import java.io.*;

public class Parser 
{
  	TabSim Nomes  = new TabSim(); // nomes globais
   	TabSim Locais = null;		 // nomes locais (ativada dentro de função)
	static Programa programa;
	static Vector<Comando> progTemp;
	
	static int tam = 0;						 // tamanho do programa

	public static Programa traduzRobo(String arq) throws ParseException, FileNotFoundException
  	{
  		FileInputStream fstream;
  		Parser parser;

  		tam = 0;
  		
		fstream = new FileInputStream(arq);
		parser = new Parser(fstream); // cria o compilador
		//Parser.ReInit(fstream);
		parser.ReInit(fstream);
		progTemp = parser.Compila(); // compila e retorna o código de máquina
		programa = new Programa(progTemp);
		return programa;
	}
}

PARSER_END(Parser)

// Pula espaço em branco e comentários
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}



// Programa é o ponto de partida
Vector<Comando> Compila() :
{
	Vector<Comando> p = new Vector<Comando>(0); // para retornar
	Vector<Comando> x = new Vector<Comando>(0); // trecho compilado
													// por outras regras
	p.add(new Comando("PUSH", new Endereco(-1))); //Para ter um endereco para o último ret.
	tam++;

	//Comando[] a = new Comando[0]; // auxiliar
}
{
	(
	 	x = Instrucao() {p.addAll(x); tam = p.size();}
	)*
	<EOF> 
	{
		p.add(new Comando("RET", null));		// para garantir que tem um RET
		return p;
		//return  p.toArray(a);
	}
}

Vector<Comando> Instrucao() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
}
{
	(
		x = Expressão() ";" {p.addAll(x);}
		|
		x = Condicional()   {p.addAll(x);}
		|
		x = Laço()	{p.addAll(x);}
		|
		x = Função()		 
		{
			p.add(new Comando("JMP", new Numero(x.size()+1))); // pula a descrição da função. Checar o lugar do pulo
			p.addAll(x);
		}
		| 
		"return" (x=Expressão() {p.addAll(x);})? ";" {p.add(new Comando("RET", null));}
		|
		"print" x=ListPrint() {p.addAll(x);} ";"
		|
		"println" ";"
		{
			p.add(new Comando("PUSH", new Frase("\n")));
			p.add(new Comando("PRN", null));
		}
		
	) 
	{return p;}
}

Vector<Comando> Expressão() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Arit() { p.addAll(x); }
	(
		"<=" x = Arit() {p.addAll(x); p.add(new Comando("LE", null));}
		|
		">=" x = Arit() {p.addAll(x); p.add(new Comando("GE", null));}
		|
		"!=" x = Arit() {p.addAll(x); p.add(new Comando("NE", null));}
		|
		"==" x = Arit() {p.addAll(x); p.add(new Comando("EQ", null));}
		|
		"<"  x = Arit() {p.addAll(x); p.add(new Comando("LT", null));}
		|
		">"  x = Arit() {p.addAll(x); p.add(new Comando("GT", null));}
		|
		"isa" x = Arit() {p.addAll(x); p.add(new Comando("ISA", null));}
	)* 
	{return p;}
}

Vector<Comando> Arit() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Termo() { p.addAll(x); }
	(
		"+" x = Termo() {p.addAll(x); p.add(new Comando("ADD", null));}
		|
		"-" x = Termo() {p.addAll(x); p.add(new Comando("SUB", null));}
	)* 
	{return p;}
}

Vector<Comando> Termo() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Fator() { p.addAll(x); }
	(
		"*" x = Fator() {p.addAll(x); p.add(new Comando("MUL", null));}
		|
		"/" x = Fator() {p.addAll(x); p.add(new Comando("DIV", null));}
	)* 
	{return p;}
}

Vector<Comando> Fator() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
	Símbolo v;
}
{
	x=Chamada()// Chamada de função 
  	{				
		p.addAll(x); 
		return p;
	}
	|
	"move" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("WALK",null));
		return p;			
	}
	|
	"look" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("LOOK", null));
		return p;
	}
	|
	"getRobo" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETROBO",null));	
		return p;		
	}
	|
	"myTime" "("")" 
	{
		p.addAll(x);
		p.add(new Comando("MYTIME",null));	
		return p;		
	}
	|
	"atk" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("ATK",null));	
		return p;		
	}
	|
	"missel" "(" x=Expressão() ")"
	{
		p.addAll(x);
		p.add(new Comando("MSL",null));	
		return p;
	}
	|
	"collect" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("COLLECT",null));	
		return p;		
	}
	|
	"drop" "(" x=Expressão() ")"
	{
		p.addAll(x);
		p.add(new Comando("DROP",null));	
		return p;		
	}
	|
	"getTime" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETTIME",null));	
		return p;		
	}
	|
	"timeRobo" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("TIMERB",null));
		return p;			
	}
	|
	"timeId" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("TIMEID",null));
		return p;			
	}
	|
	"getX" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETX",null));
		return p;			
	}
	|
	"getY" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETY",null));
		return p;			
	}
	| 
	"mod" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("MOD",null));
		return p;			
	}
	|
	"getBase" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETBASE",null));
		return p;			
	}
	|
	"getPos" "(" x=Expressão() ")" 
	{
		p.addAll(x);
		p.add(new Comando("GETPOS",null));
		return p;			
	}
	|
	"dropBomba" "("")" 
	{
		p.addAll(x);
		p.add(new Comando("BOMBA",null));
		return p;			
	}
	|								// Atribuição
	t=<ID> "=" x=Expressão() 
   	{	
		p.addAll(x);
		p.add(new Comando("DUP", null));		// deixa uma cópia na pilha

		// Verifica se estamos dentro de uma função
		if ((Locais != null) && Locais.exists(t.image)) 
    	{
			v = Locais.get(t.image);
    		//  p.add(new Comando("PUSH", new Numero(0))); Var recebe expressão, já empilhado
      		p.add(new Comando("LSTO", new Numero(v.pos.get()))); // V é símbolo. Atenção
    	}
		else if (Nomes.exists(t.image)) 
    	{ // existe como global? sera?
			v = Nomes.get(t.image);
			if (!(v instanceof Função))
      		{
        		// p.add(new Comando("PUSH", new Numero(0))); 
         		p.add(new Comando("STO", new Numero(v.pos.get()))); // V é símbolo. Atenção
      		}
			else 
      		{
        		p.add(new Comando("PUSH", new Frase(t.image)));
        		p.add(new Comando("PRN", null)); // colocar erro de compilação aqui
      		}
		}
		else 
    	{					// cria local ou global, de acordo
			v = new Variável();
			if (Locais != null) 
      		{ // dentro de função -> local
				Locais.add(t.image,v);
				System.out.println("Nova variavel local:"+t.image+" em "+v.pos.get());
       			// p.add(new Comando("PUSH", new Numero(0))); 
        		p.add(new Comando("LSTO", new Numero(v.pos.get()))); // V é símbolo. Atenção
			}
			else 
      		{				// global
				Nomes.add(t.image,v);
				System.out.println("1Nova variavel global:"+t.image+" em "+v.pos.get());
       			// p.add(new Comando("PUSH", new Numero(0))); 
        		p.add(new Comando("STO", new Numero(v.pos.get()))); // V é símbolo. Atenção
			}
		}
	 	return p;
	}
	|
	t=<RESERVADA>
	{
		p.add(new Comando("PUSH",new Numero(TipoEnum.valueOf(t.image).id())));
		System.out.println("PALAVRA RESERVADA USADA:"+t.image+" COM ID"+ TipoEnum.valueOf(t.image).id());
		return p;
	}
	|
	t=<ID> 
	{					// variável, tratamento similar ao de cima
		if ((Locais != null) && Locais.exists(t.image)) 
    	{
  			v = Locais.get(t.image);	
  			System.out.println("Acessando variavel local ------- :"+t.image);
  			p.add(new Comando("LRCL", new Numero(v.pos.get()))); // V é símbolo. Lembre-se.
   		}
		else if (Nomes.exists(t.image)) 
    	{
			v = Nomes.get(t.image);
			System.out.println("Acessando variavel global:"+t.image);
			if (!(v instanceof Função)) p.add(new Comando("RCL", new Numero(v.pos.get()))); // V é símbolo. Sacou né?
			else
      		{
        		throw new ParseException(t.image+" esta definida como função, mas está sendo usada como variável");
      		}
		}
 		else 
    	{
 			// Variável não inicializada
 			v = new Variável();
			p.add(new Comando("PUSH", new Numero(0)));
			p.add(new Comando("DUP", null));
			if (Locais != null) 
      		{
				Locais.add(t.image,v);
				System.out.println("Ciando variavel local:"+t.image);
			  p.add(new Comando("LSTO", new Numero(v.pos.get())));// V é....adivinha?
				//p.add(new Comando("SET", null);
			}
			else 
      		{
				Nomes.add(t.image,v);
				System.out.println("Ciando variavel global:"+t.image);
        		p.add(new Comando("STO", new Numero(v.pos.get())));
				//p.add(new Comando("SET", null);
			}
 		}
		return p;
	}
	|
	t=<NUM> 
	{
		p.add(new Comando("PUSH", new Numero(Double.parseDouble(t.image)))); 
		return p;
	}
	|
    "(" x = Expressão() ")"	
    {
		p.addAll(x); 
		return p;
	}

}

Vector<Comando> Condicional() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	int delta, pos;
}
{
	("if" | "se") 
    "(" 
		x=Expressão() {p.addAll(x);} 
	")" 
	("then" | "então")?
	x = Bloco() 
	{
		delta = x.size(); 
		pos = p.size(); // para arrumar no else, se preciso
		p.add(new Comando("JIF",new Numero((delta+1)))); //ANTIGO: tam + delta + pos + 2 
		p.addAll(x); 
		//		return p;
	}
	( 
		("else" | "senão" )
		x = Bloco() 
		{
			p.set(pos, new Comando("JIF", new Numero(delta+2)));
			delta = x.size();
			p.add(new Comando("JMP", new Numero(delta+1))); //ANTIGO: tam + pos + delta+2
			p.addAll(x);
		} 
	)?
	{ return p; }
}

Vector<Comando> Laço() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	int exp, delta;
}
{
	( "while" | "enquanto" )
	"("x = Expressão() 
	{
		exp = x.size(); 
		p.addAll(x);
	}
	")" 
    ( "do" | "faça" )?
	x = Bloco() 
	{
		delta = x.size();
		p.add(new Comando("JIF",new Numero(delta+2)));
		p.addAll(x);
		p.add(new Comando("JMP",  new Numero(-(delta+exp+1))));
		return p;
	}
}

Vector<Comando> Bloco() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	"{" ( x=Instrucao() { p.addAll(x); } )* "}" {return p;}	  
}

Vector<Comando> Função() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
	Função v;
	String nome;
	TabSim Lorig;
}
{
	"func" t=<ID> 
	{				// t.image contém o nome
		if (Nomes.exists(nome = t.image)) 
		{ 	// já foi definida?
			v = (Função)Nomes.get(nome);
			throw new ParseException(nome+" já foi definido anteriormente, impossível criar função com esse nome.");
		}
		else 
		{					// cria a função
			v = new Função(tam+1);//+1 pra pular o JMP que vem antes da função
			Nomes.add(nome,v);
		}
		Lorig = Locais;			// guarda a tabela de símbolos locais
								// (isso permite definições encaixadas,
								// apesar do escopo de função ser
								// global)
		Locais = v.Vars;
		Variável.pushFrame(); //Define um novo frame para separar uma nova seção de 
							  // Variáveis locais
	}
	"(" (Args(nome,v))? ")"		// lista de argumentos
	x=Bloco() 					// corpo
	{
		p.addAll(x); 
		p.add(new Comando("RET",null)); 		// garante RET
		Locais = Lorig;			// restaura tabela de símbolos
		Variável.popFrame();   // Retira o frame
		return p;
	}
}

void Args(String fnom, Função v) :
{
}
{
	Arg(fnom,v)	( ","	 Arg(fnom,v) )*
}

// Um argumento
void Arg(String fnom, Função f) :
{
	Token t;
}
{
	t=<ID> 
	{
		if (!f.exists(t.image)){ f.addarg(t.image);System.out.println("Criando variavel arg:"+t.image);	}
	}
}

Vector<Comando> Chamada() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
	Função f;
	Endereco e;
	String nome;
	TabSim Lorig;
}
{
    t=<ID> 
    {					// nome da função
  		if (Nomes.exists(nome = t.image)) 
  		{
			f =  (Função) Nomes.get(t.image); // Aqui gera erro se não for função
			e = f.pos;
		}
		else 
		{ 
			e  = new Endereco(-1); //MUITO ARRISCADO!!!! Colete os
								   //pontos na tabela de símbolos e
								   //corrija os pontos depois
			f = new Função(0);
			

			throw new ParseException("Função "+t.image+" não definida");
			// O certo seria coletar os pontos e ver se é declarada depois,
			// Mas o tempo disponível é um fator limitante.
		}

		Lorig = Locais;			// disponibiliza o nome dos argumentos
		
	}
	(
	"("
		(x=ListParms(f) {p.addAll(x);})? // lista de parâmetros
	")"
	|
	"("")"{
		
		Locais = f.Vars;
		p.add(new Comando("ENTRA",null));		// novo contexto

		}
	)
    {
		p.add(new Comando("CALL",e)); 	// chama
		Locais = Lorig;			// restaura
		return p;
	}
}

//Lista de parametros
Vector<Comando> ListParms(Função f) :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
	int n = 0;
	String pnom;
	Variável v;
}
{
	x = Parm(f,n++) {p.addAll(x); } // compila cada argumento
	
	(
		","
		x = Parm(f,n++) {p.addAll(x);}
	)*
	{ 
		
		// populando
		Locais = f.Vars;
		p.add(new Comando("ENTRA",null));		// novo contexto
		for (int i = n-1; i >=0 ; i--) 
		{
			pnom = f.getarg(i);
			
			if (!Locais.exists(pnom))
			{
				// adiciona na tabela quando usada
				v = new Variável();
				Locais.add(pnom,v);
				System.out.println("Ciando variavel local via arg 23:"+pnom);
			}
			v = (Variável) Locais.get(pnom);
			System.out.println("Endereço da var arg local:"+v.pos.get());
			p.add(new Comando("LSTO", new Numero(v.pos.get())));
		}
		return p;
	}

}

// Um argumento
Vector<Comando> Parm(Função f, int n) :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x = Expressão() 
	{
		p.addAll(x);
		return p;
	}
	
}

// Lista para impressão
Vector<Comando> ListPrint() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
}
{
	x=ItemPrint() 
	{
		p.addAll(x);
	}
	
	(
		","
		x=ItemPrint() 
		{
			p.addAll(x);
		}
	)*
	{ return p;}
}

// Um ítem a ser impresso
Vector<Comando> ItemPrint() :
{
	Vector<Comando> p = new Vector<Comando>(0);
	Vector<Comando> x = new Vector<Comando>(0);
	Token t;
}
{
	(
		x=Expressão() 
		{
			p.addAll(x);
			p.add(new Comando("PRN", null));
		}
		|
		t=<STRING_LITERAL> 
		{
			String s =  t.image;
			while (s.contains("\\n"))
				s = s.replace("\\n","\n");
			while (s.contains("\\t"))
				s = s.replace("\\t", "\t");
			while (s.contains("\\b"))
				s = s.replace("\\b", "\b");
			while (s.contains("\\r"))
				s = s.replace("\\r", "\r");
			while (s.contains("\\f"))
				s = s.replace("\\f", "\f");
			while (s.contains("\\\\"))
				s = s.replace("\\\\", "\\");

			p.add(new Comando("PUSH", new Frase(s.substring(1,s.length()-1))));
			p.add(new Comando("PRN", null));
		}
	)
	{ return p;}
}

TOKEN :
{
	< RESERVADA: ("AGUA"|"LISO"|"RUGOSO"|"DEPOSITO"|"ROBO"|"CRISTAL"|"NUMERO"|"TERRENO"|"BASE")>
	|
	< NUM: ( ["0"-"9"] )+ >
	|
	< ID: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9","@"] )* >
	|
	<STRING_LITERAL: "\"" ( ~["\"","\\","\n","\r"] | "\\" ( ["n","t","b","r","f","\\","\'","\""] | ["0"-"7"] (["0"-"7"])?  | ["0"-"3"] ["0"-"7"] ["0"-"7"] | ( ["\n","\r"] | "\r\n")))* "\"">
}
